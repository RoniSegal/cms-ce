
apply plugin: 'maven'

configurations {
    publish.extendsFrom(archives)
}

uploadArchives {
    configuration = configurations.publish

    repositories.mavenDeployer { deployer ->
        repository(url: 'file:///Users/srs/development/repo')

        configurePom(deployer.pom)
    }
}

install {
    configurePom(repositories.mavenInstaller.pom)
}

task publish(dependsOn: 'uploadArchives') {
    group = 'Upload'
    description = 'Alias for uploadArchives'
}

def configurePom(def pom) {
    pom.whenConfigured { generatedPom ->

        def optionalDeps = configurations.testRuntime.allDependencies.findAll { gradleDep ->
            gradleDep.asDynamicObject.hasProperty('optional') && gradleDep.optional
        }

        def providedDeps = configurations.testRuntime.allDependencies.findAll { gradleDep ->
            gradleDep.asDynamicObject.hasProperty('provided') && gradleDep.provided
        }

        generatedPom.dependencies.each { mavenDep ->
            mavenDep.optional = optionalDeps.any { optionalDep ->
                optionalDep.group == mavenDep.groupId &&
                        optionalDep.name == mavenDep.artifactId &&
                        optionalDep.version == mavenDep.version
            }
            boolean isProvided = providedDeps.any { providedDep ->
                providedDep.group == mavenDep.groupId &&
                        providedDep.name == mavenDep.artifactId &&
                        providedDep.version == mavenDep.version
            }
            if (isProvided) {
                mavenDep.scope = 'provided'
            }
        }

        generatedPom.dependencies.removeAll(pom.dependencies.findAll { it.scope == "test" })
    }

    pom.project {
        organization {
            name = 'Enonic AS'
            url = 'http://www.enonic.com'
        }
    }
}
